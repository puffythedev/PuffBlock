#version 330 core
struct Material {
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
    float shininess;
}; 
  
uniform Material material;

out vec4 pixelColor;
in vec2 texPos;
in vec3 Normal;
in vec3 pixelPos;

uniform float pix_enabled;
uniform vec3 pix_objectColor;
uniform vec3 pix_lightColor;
uniform sampler2D u_Texture;
uniform vec3 lightPos;
uniform vec3 viewPos;

void main() {
    float specularStrength = 0.5;

    if(pix_enabled == 1.0) {
        pixelColor = vec4(pix_lightColor * pix_objectColor, 1.0);
    } else {
        vec4 texColor = texture(u_Texture, texPos); // vec4(0.75, 0.14, 0.5, 1.0);
	
	// ambient
    	vec3 ambient = pix_lightColor * material.ambient;
  	
    	// diffuse 
    	vec3 norm = normalize(Normal);
    	vec3 lightDir = normalize(lightPos - pixelPos);
    	float diff = max(dot(norm, lightDir), 0.0);
    	vec3 diffuse = pix_lightColor * (diff * material.diffuse);
    
    	// specular
    	vec3 viewDir = normalize(viewPos - pixelPos);
    	vec3 reflectDir = reflect(-lightDir, norm);  
    	float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
    	vec3 specular = pix_lightColor * (spec * material.specular);  
        
    	vec3 result = ambient + diffuse + specular;
        pixelColor = vec4(result, texColor.a);
    }
}
